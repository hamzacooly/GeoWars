


ARM Macro Assembler    Page 1 


    1 00000000         ; Print.s
    2 00000000         ; Student names: change this to your names or look very 
                       silly
    3 00000000         ; Last modification date: change this to the last modifi
                       cation date or look very silly
    4 00000000         ; Runs on LM4F120 or TM4C123
    5 00000000         ; EE319K lab 7 device driver for any LCD
    6 00000000         ;
    7 00000000         ; As part of Lab 7, students need to implement these LCD
                       _OutDec and LCD_OutFix
    8 00000000         ; This driver assumes two low-level LCD functions
    9 00000000         ; ST7735_OutChar   outputs a single 8-bit ASCII characte
                       r
   10 00000000         ; ST7735_OutString outputs a null-terminated string 
   11 00000000         
   12 00000000                 IMPORT           ST7735_OutChar
   13 00000000                 IMPORT           ST7735_OutString
   14 00000000                 EXPORT           LCD_OutDec
   15 00000000                 EXPORT           LCD_OutFix
   16 00000000         
   17 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   18 00000000                 THUMB
   19 00000000                 PRESERVE8
   20 00000000         
   21 00000000         
   22 00000000         
   23 00000000         ;-----------------------LCD_OutDec----------------------
                       -
   24 00000000         ; Output a 32-bit number in unsigned decimal format
   25 00000000         ; Input: R0 (call by value) 32-bit unsigned number
   26 00000000         ; Output: none
   27 00000000         ; Invariables: This function must not permanently modify
                        registers R4 to R11
   28 00000000         LCD_OutDec
   29 00000000 B580            PUSH             {R7, LR}    ;save LR because su
                                                            broutine is called,
                                                             save R11 so that s
                                                            tays 4 byte aligned
                                                            
   30 00000002 280A            CMP              R0, #10     ;checking to see if
                                                             the character is l
                                                            ess than 10
   31 00000004 D30C            BLO              ODEnd       ;if the character i
                                                            s less than 10, go 
                                                            to the end
   32 00000006 F04F 020A       MOV              R2, #10     ;Put 10 in R2, this
                                                             will be a divisor
   33 0000000A FBB0 F3F2       UDIV             R3, R0, R2  ;Divide the unsigne
                                                            d 32 bit number by 
                                                            10, store in R3 (R3
                                                             = R0/R2)
   34 0000000E FB03 F102       MUL              R1, R3, R2  ;R1 = num/(10*10)
   35 00000012 EBA0 0101       SUB              R1, R0, R1  ;R1 = num%10
   36 00000016 B442            PUSH             {R1, R6}    ;Save R1, R6 is to 
                                                            preserve 8 byte ali
                                                            gnment
   37 00000018 0018            MOVS             R0, R3      ;num = num/10, R0 w
                                                            ill be used for inp



ARM Macro Assembler    Page 2 


                                                            ut when the functio
                                                            n calls itself
   38 0000001A F7FF FFFE       BL               LCD_OutDec  ;Calling LCD_OutDec
                                                            (Updated num)
   39 0000001E BC41            POP              {R0, R6}    ;restore R1 into R0
                                                            , , R6 is to preser
                                                            ve 8 byte alignment
                                                            
   40 00000020         
   41 00000020         ODEnd
   42 00000020 F100 0030       ADD              R0, R0, #0x30 ;converts to ASCI
                                                            I, puts in R0 so it
                                                             can be the input f
                                                            or ST7735_OutChar
   43 00000024 F7FF FFFE       BL               ST7735_OutChar ;print character
                                                             to LCD
   44 00000028 E8BD 4080       POP              {R7, LR}    ;balance stack
   45 0000002C         
   46 0000002C 4770            BX               LR
   47 0000002E         ;* * * * * * * * End of LCD_OutDec * * * * * * * *
   48 0000002E         
   49 0000002E         ; -----------------------LCD _OutFix--------------------
                       --
   50 0000002E         ; Output characters to LCD display in fixed-point format
                       
   51 0000002E         ; unsigned decimal, resolution 0.001, range 0.000 to 9.9
                       99
   52 0000002E         ; Inputs:  R0 is an unsigned 32-bit number
   53 0000002E         ; Outputs: none
   54 0000002E         ; E.g., R0=0,    then output "0.000 "
   55 0000002E         ;       R0=3,    then output "0.003 "
   56 0000002E         ;       R0=89,   then output "0.089 "
   57 0000002E         ;       R0=123,  then output "0.123 "
   58 0000002E         ;       R0=9999, then output "9.999 "
   59 0000002E         ;       R0>9999, then output "*.*** "
   60 0000002E         ; Invariables: This function must not permanently modify
                        registers R4 to R11
   61 0000002E         LCD_OutFix
   62 0000002E         
   63 0000002E B51F            PUSH             {R0-R4, LR}
   64 00000030 F242 710F       LDR              R1, =0x270F
   65 00000034 4288            CMP              R0, R1      ;if R0<=9999,
   66 00000036 D914            BLS              FixOut      ;then proceed with 
                                                            fix
   67 00000038 F04F 002A       MOV              R0, #"*"    ;otherwise, output 
                                                            *.***
   68 0000003C F7FF FFFE       BL               ST7735_OutChar
   69 00000040 F04F 002E       MOV              R0, #"."
   70 00000044 F7FF FFFE       BL               ST7735_OutChar
   71 00000048 F04F 002A       MOV              R0, #"*"
   72 0000004C F7FF FFFE       BL               ST7735_OutChar
   73 00000050 F04F 002A       MOV              R0, #"*"
   74 00000054 F7FF FFFE       BL               ST7735_OutChar
   75 00000058 F04F 002A       MOV              R0, #"*"
   76 0000005C F7FF FFFE       BL               ST7735_OutChar
   77 00000060 E057            B                ExitOutFix
   78 00000062         FixOut
   79 00000062 F04F 010A       MOV              R1, #0x0A   ;initialize startin
                                                            g values needed



ARM Macro Assembler    Page 3 


   80 00000066 B08A            SUB              SP, SP, #40
   81 00000068 F04F 0C00       MOV              R12, #0x00
   82 0000006C F04F 0300       MOV              R3, #0x00
   83 00000070 F04F 0404       MOV              R4, #4
   84 00000074         SetZero
   85 00000074 EA4F 028C       LSL              R2, R12, #2 ;set number of lead
                                                            ing zeros
   86 00000078 F84D 3002       STR              R3, [SP, R2]
   87 0000007C F10C 0C01       ADD              R12, R12, #1
   88 00000080 1E64            SUBS             R4, R4, #1
   89 00000082 D1F7            BNE              SetZero
   90 00000084         BacktoFix
   91 00000084 F04F 0C00       MOV              R12, #0x00  ;reinitializes more
                                                             values
   92 00000088 F04F 0403       MOV              R4, #3
   93 0000008C         FixStore
   94 0000008C 2809            CMP              R0, #0x09
   95 0000008E D90B            BLS              LastNum2
   96 00000090 FBB0 F2F1       UDIV             R2, R0, R1
   97 00000094 FB02 0311       MLS              R3, R2, R1, R0
   98 00000098 4610            MOV              R0, R2
   99 0000009A EA4F 028C       LSL              R2, R12, #2
  100 0000009E F84D 3002       STR              R3, [SP, R2]
  101 000000A2 F10C 0C01       ADD              R12, R12, #1
  102 000000A6 E7F1            B                FixStore
  103 000000A8         LastNum2
  104 000000A8 EA4F 028C       LSL              R2, R12, #2
  105 000000AC F84D 0002       STR              R0, [SP, R2]
  106 000000B0 F10C 0C01       ADD              R12, R12, #1
  107 000000B4         Print
  108 000000B4 F04F 0C04       MOV              R12, #4
  109 000000B8 F1AC 0C01       SUB              R12, R12, #1
  110 000000BC EA4F 028C       LSL              R2, R12, #2
  111 000000C0 F85D 0002       LDR              R0, [SP, R2]
  112 000000C4 F100 0030       ADD              R0, R0, #0x30
  113 000000C8 F7FF FFFE       BL               ST7735_OutChar ;prints X.000 (o
                                                            nes place)
  114 000000CC F04F 002E       MOV              R0, #"."
  115 000000D0 F7FF FFFE       BL               ST7735_OutChar 
                                                            ;prints the decimal
                                                            
  116 000000D4 F1AC 0C01       SUB              R12, R12, #1
  117 000000D8 EA4F 028C       LSL              R2, R12, #2
  118 000000DC F85D 0002       LDR              R0, [SP, R2]
  119 000000E0 F100 0030       ADD              R0, R0, #0x30
  120 000000E4 F7FF FFFE       BL               ST7735_OutChar ;prints 0.X00 (t
                                                            enths place)
  121 000000E8 F1AC 0C01       SUB              R12, R12, #1
  122 000000EC EA4F 028C       LSL              R2, R12, #2
  123 000000F0 F85D 0002       LDR              R0, [SP, R2]
  124 000000F4 F100 0030       ADD              R0, R0, #0x30
  125 000000F8 F7FF FFFE       BL               ST7735_OutChar ;prints 0.0X0 (h
                                                            undredths place)
  126 000000FC F1AC 0C01       SUB              R12, R12, #1
  127 00000100 EA4F 028C       LSL              R2, R12, #2
  128 00000104 F85D 0002       LDR              R0, [SP, R2]
  129 00000108 F100 0030       ADD              R0, R0, #0x30
  130 0000010C F7FF FFFE       BL               ST7735_OutChar ;prints 0.00X (t
                                                            housandths place)



ARM Macro Assembler    Page 4 


  131 00000110 B00A            ADD              SP, SP, #40
  132 00000112         ExitOutFix
  133 00000112 BD1F            POP              {R0-R4, PC}
  134 00000114 4770            BX               LR
  135 00000116 00 00           ALIGN
  136 00000118         ;* * * * * * * * End of LCD_OutFix * * * * * * * *
  137 00000118         
  138 00000118                 ALIGN                        ; make sure the end
                                                             of this section is
                                                             aligned
  139 00000118                 END                          ; end of file
Command Line: --debug --xref --cpu=Cortex-M4 --apcs=interwork --depend=.\print.
d -o.\print.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\
Inc\Luminary --list=.\print.lst Print.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 17 in file Print.s
   Uses
      None
Comment: .text unused
BacktoFix 00000084

Symbol: BacktoFix
   Definitions
      At line 90 in file Print.s
   Uses
      None
Comment: BacktoFix unused
ExitOutFix 00000112

Symbol: ExitOutFix
   Definitions
      At line 132 in file Print.s
   Uses
      At line 77 in file Print.s
Comment: ExitOutFix used once
FixOut 00000062

Symbol: FixOut
   Definitions
      At line 78 in file Print.s
   Uses
      At line 66 in file Print.s
Comment: FixOut used once
FixStore 0000008C

Symbol: FixStore
   Definitions
      At line 93 in file Print.s
   Uses
      At line 102 in file Print.s
Comment: FixStore used once
LCD_OutDec 00000000

Symbol: LCD_OutDec
   Definitions
      At line 28 in file Print.s
   Uses
      At line 14 in file Print.s
      At line 38 in file Print.s

LCD_OutFix 0000002E

Symbol: LCD_OutFix
   Definitions
      At line 61 in file Print.s
   Uses
      At line 15 in file Print.s
Comment: LCD_OutFix used once
LastNum2 000000A8




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Symbol: LastNum2
   Definitions
      At line 103 in file Print.s
   Uses
      At line 95 in file Print.s
Comment: LastNum2 used once
ODEnd 00000020

Symbol: ODEnd
   Definitions
      At line 41 in file Print.s
   Uses
      At line 31 in file Print.s
Comment: ODEnd used once
Print 000000B4

Symbol: Print
   Definitions
      At line 107 in file Print.s
   Uses
      None
Comment: Print unused
SetZero 00000074

Symbol: SetZero
   Definitions
      At line 84 in file Print.s
   Uses
      At line 89 in file Print.s
Comment: SetZero used once
11 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

ST7735_OutChar 00000000

Symbol: ST7735_OutChar
   Definitions
      At line 12 in file Print.s
   Uses
      At line 43 in file Print.s
      At line 68 in file Print.s
      At line 70 in file Print.s
      At line 72 in file Print.s
      At line 74 in file Print.s
      At line 76 in file Print.s
      At line 113 in file Print.s
      At line 115 in file Print.s
      At line 120 in file Print.s
      At line 125 in file Print.s
      At line 130 in file Print.s

ST7735_OutString 00000000

Symbol: ST7735_OutString
   Definitions
      At line 13 in file Print.s
   Uses
      None
Comment: ST7735_OutString unused
2 symbols
343 symbols in table
